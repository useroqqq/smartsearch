let map;
let userMarker;
let currentLocation;
let searchResults = [];
let routeControl;
let nearestObjects = [];
let currentRouteIndex = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    map = L.map('map').setView([55.76, 37.64], 10);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    const geolocationButton = L.control({ position: 'topright' });
    geolocationButton.onAdd = function() {
        const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
        div.innerHTML = '<a href="#" title="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" style="width: 30px; height: 30px; line-height: 30px;">üìç</a>';
        div.onclick = function(e) {
            e.preventDefault();
            getCurrentLocation();
        };
        return div;
    };
    geolocationButton.addTo(map);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function getCurrentLocation() {
    try {
        const position = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject);
        });

        const { latitude, longitude } = position.coords;
        currentLocation = [latitude, longitude];
        
        map.setView(currentLocation, 15);

        if (userMarker) {
            map.removeLayer(userMarker);
        }

        userMarker = L.marker(currentLocation, {
            icon: L.divIcon({
                className: 'user-marker',
                html: '<div style="background-color: red; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white;"></div>'
            })
        }).addTo(map);

        return currentLocation;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.');
    }
}

// –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
async function searchNearby() {
    if (!currentLocation) {
        alert('–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
        return;
    }

    try {
        clearSearchResults();
        currentRouteIndex = 0;

        const bounds = map.getBounds();
        const radius = 1000; // —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Overpass API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–∞–≤–æ–∫
        const query = `
            [out:json][timeout:25];
            (
                node["amenity"="fuel"](around:${radius},${currentLocation[0]},${currentLocation[1]});
            );
            out body;
            >;
            out skel qt;
        `;

        const response = await fetch('https://overpass-api.de/api/interpreter', {
            method: 'POST',
            body: query
        });

        const data = await response.json();
        const distances = [];

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        data.elements.forEach(element => {
            if (element.type === 'node') {
                const coords = [element.lat, element.lon];
                const distance = calculateDistance(currentLocation, coords);
                
                if (bounds.contains(L.latLng(coords))) {
                    distances.push({
                        coords,
                        distance,
                        name: element.tags.name || '–ó–∞–ø—Ä–∞–≤–∫–∞',
                        address: element.tags['addr:street'] ? 
                            `${element.tags['addr:street']}${element.tags['addr:housenumber'] ? ', ' + element.tags['addr:housenumber'] : ''}` : 
                            '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'
                    });
                }
            }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –±–µ—Ä–µ–º 3 –±–ª–∏–∂–∞–π—à–∏—Ö
        distances.sort((a, b) => a.distance - b.distance);
        nearestObjects = distances.slice(0, 3);

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
        const objectsList = document.createElement('div');
        objectsList.className = 'objects-list';
        objectsList.innerHTML = '<h3>–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø—Ä–∞–≤–∫–∏:</h3>';

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –≤ —Å–ø–∏—Å–∫–µ
        nearestObjects.forEach((item, index) => {
            const distance = (item.distance / 1000).toFixed(1);
            
            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
            const marker = L.marker(item.coords, {
                icon: L.divIcon({
                    className: 'object-marker',
                    html: `<div style="background-color: #ff4444; 
                           color: white; 
                           width: 24px; 
                           height: 24px; 
                           border-radius: 50%; 
                           border: 2px solid white;
                           text-align: center;
                           line-height: 20px;">${index + 1}</div>`
                })
            }).addTo(map);

            marker.bindPopup(`
                <div style="padding: 10px;">
                    <h3>${item.name}</h3>
                    <p>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –∫–º</p>
                </div>
            `);

            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
            const objectElement = document.createElement('div');
            objectElement.className = 'object-item';
            objectElement.innerHTML = `
                <div class="object-info">
                    <h4>${index + 1}. ${item.name}</h4>
                    <p>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –∫–º</p>
                </div>
                <button class="route-button-small" data-coords="${item.coords.join(',')}">
                    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
                </button>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
            const routeButton = objectElement.querySelector('.route-button-small');
            routeButton.addEventListener('click', () => {
                buildRoute(item.coords);
            });

            objectsList.appendChild(objectElement);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const routeInfo = document.getElementById('routeInfo');
        routeInfo.innerHTML = '';
        routeInfo.appendChild(objectsList);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø—Ä–∞–≤–æ–∫');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
function calculateDistance(point1, point2) {
    const R = 6371e3; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const œÜ1 = point1[0] * Math.PI/180;
    const œÜ2 = point2[0] * Math.PI/180;
    const ŒîœÜ = (point2[0]-point1[0]) * Math.PI/180;
    const ŒîŒª = (point2[1]-point1[1]) * Math.PI/180;

    const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
              Math.cos(œÜ1) * Math.cos(œÜ2) *
              Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    return R * c; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –∑–∞–ø—Ä–∞–≤–∫–∏
function buildRouteToNearest() {
    if (!nearestObjects.length) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–ø—Ä–∞–≤–æ–∫');
        return;
    }

    currentRouteIndex = 0;
    buildRoute(nearestObjects[0].coords);
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø—Ä–∞–≤–∫–∏
function buildRouteToNext() {
    if (!nearestObjects.length) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–ø—Ä–∞–≤–æ–∫');
        return;
    }

    currentRouteIndex = (currentRouteIndex + 1) % nearestObjects.length;
    buildRoute(nearestObjects[currentRouteIndex].coords);
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
async function buildRoute(destination) {
    if (!currentLocation) return;

    try {
        if (routeControl) {
            map.removeControl(routeControl);
            routeControl = null;
        }

        routeControl = L.Routing.control({
            waypoints: [
                L.latLng(currentLocation),
                L.latLng(destination)
            ],
            routeWhileDragging: false,
            language: 'ru',
            createMarker: function() { return null; },
            router: L.Routing.osrmv1({
                serviceUrl: 'https://router.project-osrm.org/route/v1',
                profile: 'driving',
                alternatives: false
            }),
            lineOptions: {
                extendToWaypoints: true,
                missingRouteTolerance: 0,
                styles: [{ color: '#ff0000', weight: 4, opacity: 0.8 }]
            },
            addWaypoints: false,
            draggableWaypoints: false,
            fitSelectedRoutes: true,
            showAlternatives: false,
            useZoomParameter: true,
            formatter: new L.Routing.Formatter({
                language: 'ru',
                roundingSensitivity: 30
            }),
            plan: L.Routing.plan([
                L.latLng(currentLocation),
                L.latLng(destination)
            ], {
                createMarker: function() { return null; },
                dragStyles: [{ color: '#ff0000', weight: 4, opacity: 0.8 }]
            })
        }).addTo(map);

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–º
        const container = document.querySelector('.leaflet-routing-container');
        if (container) {
            const elements = container.querySelectorAll('h3');
            elements.forEach(el => {
                if (el.textContent === 'Route') {
                    el.textContent = '–ú–∞—Ä—à—Ä—É—Ç';
                } else if (el.textContent === 'Alternative routes') {
                    el.textContent = '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã';
                }
            });
        }

        routeControl.on('routesfound', function(e) {
            const routes = e.routes;
            if (routes && routes.length > 0) {
                const route = routes[0];
                const distance = (route.summary.totalDistance / 1000).toFixed(1);
                const duration = Math.round(route.summary.totalTime / 60);

                const routeDetails = document.createElement('div');
                routeDetails.className = 'route-details';
                routeDetails.innerHTML = `
                    <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ</h3>
                    <p><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${distance} –∫–º</p>
                    <p><strong>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:</strong> ${duration} –º–∏–Ω</p>
                    <button class="clear-route-button" onclick="clearRoute()">
                        –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
                    </button>
                `;

                const routeInfoContainer = document.getElementById('routeInfo');
                const existingRouteDetails = routeInfoContainer.querySelector('.route-details');
                if (existingRouteDetails) {
                    existingRouteDetails.remove();
                }
                routeInfoContainer.appendChild(routeDetails);

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
                const clearButton = routeDetails.querySelector('.clear-route-button');
                clearButton.addEventListener('click', clearRoute);
            } else {
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É.');
            }
        });

        routeControl.on('routingerror', function(e) {
            console.error('–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:', e);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É.');
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
function clearRoute() {
    if (routeControl) {
        map.removeControl(routeControl);
        routeControl = null;
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å –∫–∞—Ä—Ç—ã
    map.eachLayer((layer) => {
        if (layer instanceof L.Routing.Line) {
            map.removeLayer(layer);
        }
    });

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    const routeDetails = document.querySelector('.route-details');
    if (routeDetails) {
        routeDetails.remove();
    }

    // –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    const routingContainer = document.querySelector('.leaflet-routing-container');
    if (routingContainer) {
        routingContainer.remove();
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function clearSearchResults() {
    map.eachLayer((layer) => {
        if (!(layer instanceof L.TileLayer)) {
            map.removeLayer(layer);
        }
    });
    if (userMarker) {
        map.addLayer(userMarker);
    }
    document.getElementById('routeInfo').innerHTML = '';
    nearestObjects = [];
    currentRouteIndex = 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const toggleButton = document.getElementById('toggleSidebar');
    const isCollapsed = sidebar.classList.toggle('collapsed');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –µ—ë –ø–æ–¥—Å–∫–∞–∑–∫—É
    toggleButton.textContent = isCollapsed ? '‚ñ∂' : '‚óÄ';
    toggleButton.title = isCollapsed ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å' : '–°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        map.invalidateSize();
    }, 300);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', () => {
    initMap();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('findLocation').addEventListener('click', getCurrentLocation);
    document.getElementById('searchNearby').addEventListener('click', searchNearby);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
    const toggleButton = document.getElementById('toggleSidebar');
    toggleButton.addEventListener('click', toggleSidebar);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            const sidebar = document.getElementById('sidebar');
            if (!sidebar.classList.contains('collapsed')) {
                toggleSidebar();
            }
        }
    });
}); 